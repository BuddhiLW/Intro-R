#+title: Introdução à Linguagem R - Instalação
#+subtitle: Para instalação, siga o vídeo: https://www.youtube.com/watch?v=nlkjH1J3oP0
#+AUTHOR: Pedro G. Branquinho, Black Scorpion Software

* Instalação
Servidores locais:

- https://cran-r.c3sl.ufpr.br/	Universidade Federal do Parana
- https://cran.fiocruz.br/	Oswaldo Cruz Foundation, Rio de Janeiro
- https://vps.fmvz.usp.br/CRAN/	University of Sao Paulo, Sao Paulo
- https://brieger.esalq.usp.br/CRAN/	University of Sao Paulo, Piracicaba

#+ATTR_HTML: :width 2000px
  [[file:img/CRAN.png][file:./img/CRAN.png]]

* IDEs: RStudio, VSCode, Emacs
** RStudio
- https://posit.co/download/rstudio-desktop/

*** Linux (Ubuntu)
#+begin_src bash
sudo apt install -f ~/Downloads/rstudio-2023.09.1-494-amd64.deb
#+end_src
*** Windows

Abrir executável
#+begin_src
C:\Downloads\rstudio-2023.09.1-494.exe
#+end_src

** VSCode
- https://code.visualstudio.com/docs/languages/r
- https://marketplace.visualstudio.com/items?itemName=REditorSupport.r
- https://github.com/randy3k/radian
- https://github.com/nx10/httpgd

In =VS Code Quick Open= (=Ctrl+P=):
#+begin_src vscode
ext install REditorSupport.r
#+end_src

** Emacs
- ess
- ess-R-data-view
- polymode
- poly-R
- company-stan
- eldoc-stan
- flycheck-stan
- stan-mode

#+begin_src emacs-lisp
(use-package ess)
(use-package ess-R-data-view)
(use-package polymode)
(use-package poly-R)
(use-package company-stan)
(use-package eldoc-stan)
(use-package flycheck-stan)
(use-package stan-mode)
#+end_src

* DONE A língua
#+begin_quote
R is a dynamic language for statistical computing that combines lazy functional
features and object-oriented programming. This rather unlikely linguistic
cocktail would probably never have been prepared by computer scientists, yet the
language has become surprisingly popular.
#+end_quote

** DONE Tipação Dinâmica
*** Exemplo 1 - Imperativa
Rotinas Imperativas

#+begin_src R :session :results output
weight <- 85
size <- 1.84
(BMI <- weight/size^2)
#+end_src

#+RESULTS:
: [1] 25.10633

*** Exemplo 2 - Orientação a Objeto

#+begin_src R :session
### Definition of an object BMI
setClass("BMI", representation(weight="numeric", size="numeric"))
#+end_src

#+begin_src R :session

setMethod("show", "BMI",
 function(object){cat("BMI =",object@weight/(object@size^2)," \n ")}
 )
#+end_src

#+RESULTS:
: show

#+begin_src R :session :results output
### Creation of an object for me, and posting of my BMI
(myBMI <- new("BMI",weight=85,size=1.84))

### Creation of an object for her, and posting of her BMI
(herBMI <- new("BMI",weight=62,size=1.60))
#+end_src

#+RESULTS:
: BMI = 25.10633
: BMI = 24.21875

*** Exemplo 2 - OOP and Typechecking
#+begin_src R :session :results output
### Traditional programming, no type
(weight <- "Hello")

## Using classes
 new("BMI",weight="Hello",size=1.84)
#+end_src

#+RESULTS:
: [1] "Hello"
: Error in validObject(.Object) :
:   invalid class “BMI” object: invalid object for slot "weight" in class "BMI": got class "character", should be or extend class "numeric"
*** Exemplo 3 - OOP and Inspection/Reflexion
#+begin_src R :session :results output
herBMI.show()
## Error in herBMI.show() : could not find function "herBMI.show"

herBMI.show
## Error: object 'herBMI.show' not found

herBMI
## BMI= 24.21875

is.object(herBMI)
## [1] TRUE
#+end_src

#+RESULTS:
: Error in herBMI.show() : could not find function "herBMI.show"
: Error: object 'herBMI.show' not found
: BMI= 24.21875
: [1] TRUE

*** Exemplo 4 - Semelhanças com outras linguagens

Objetos com métodos implícitos, como =___init___=, em =Python=:
#+begin_src python :session localhost :results both
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)
#+end_src

*** Exemplo 5 - Semelhanças com outras linguagens
#+begin_src clojure
(let [person {:name "John" :age 36}]
      ;; supérfulo criar um alias:
      ;; p1 person
  (do
    (println (:name person))
    (println (:age person))))

;; (f x y)
;; (let binds body)
;; (+ 1 2)

(let [person {:name "John" :age 36}
      show (fn [obj] (str (:name obj) " " (:age obj)))]
      ;; supérfulo criar um alias:
      ;; p1 person
    ;; (:name person)
    ;; (:age person))
  (show person))
#+end_src

*** Exemplo 6 - Semelhanças com outras linguagens

#+begin_src go
package main

import (
	"fmt"
	"strconv"
)

type Person struct {
	name string
	age  int
}

func (p Person) show() string {
	return p.name + " " + strconv.Itoa(p.age)
}

func main() {

	//creating struct specifying field names
	p1 := Person{
		name: "Fulano",
		age: 20,
	}

	//creating struct without specifying field names
	p2 := Person{"Ciclano", 37}

    // "show" method
	fmt.Println(p1.show())
	fmt.Println(p2.show())
}
#+end_src

#+RESULTS:
: Fulano 20
: Ciclano 37

** DONE Escopação Léxica Dinâmica

#+begin_quote
Some languages, like =Perl= and =Common Lisp=, allow the programmer to choose static
or dynamic scope when defining or redefining a variable.

Examples of languages that use dynamic scope include =Logo=, =Emacs Lisp=, =LaTeX= and
the shell languages =bash=, =dash=, and =PowerShell=.
#+end_quote

** DONE =Let= - raízes do conceito
*** Exemplo 1
- Local Escoping
#+begin_src lisp :results export
(let ((a 1)
      (b 2))
    (+ a b))
#+end_src

#+RESULTS:
: 3

- Implicit Local Escoping
#+begin_src lisp :results export
(defun f (a b)
  (+ a b))

(f 1 2)
#+end_src

#+RESULTS:
: 3

*** Exemplo 2
#+begin_src lisp
(defclass book ()
  ((title :reader title
          :initarg :title)
   (author :reader author
           :initarg :author))
  (:documentation "Describes a book."))

(defmethod show ((b1 book))
  (let ((titulo (title b1))
        (autor (author b1)))
   (print (format T "~S, ~S" titulo autor))))

(defparameter b1 (make-instance 'book
                        :title "ANSI Common Lisp"
                        :author "Paul Graham"))
#+end_src

#+RESULTS:
: B1

#+begin_src lisp :results output
(show b1)
#+end_src

#+RESULTS:
: "ANSI Common Lisp", "Paul Graham"
: NIL
*** Exemplo 3
#+begin_src R :session :results output
require(grDevices)
#+end_src

**** R, Classes e Métodos
#+begin_src R :session :results output
setClass(
 Class="Trajectories",
 representation=representation(
 times = "numeric",
 traj = "matrix"
 )
)
#+end_src

**** R, Classes e Métodos
#+begin_src R :session :results output
setMethod(
  f= "plot",
  signature= "Trajectories",
  definition=function (x,y,...){
    matplot(x=x@times,
            y=t(x@traj), ## (x, y) coordenates
            xaxt="n",
            type="l",
            ylab= "",
            xlab="",
            pch=1 ## plot specification
           )
    axis(1,at=x@times)
  }
)
#+end_src

#+RESULTS:

**** R em ação
#+begin_src R :session :results output
trajPitie <- new(Class="Trajectories")
trajCochin <- new(
  Class= "Trajectories",
  times=c(1,3,4,5),
  traj=rbind (
    c(15,15.1, 15.2, 15.2),
    c(16,15.9, 16,16.4),
    c(15.2, NA, 15.3, 15.3),
    c(15.7, 15.6, 15.8, 16)
  )
)

trajStAnne <- new(
  Class= "Trajectories",
  times=c(1: 10, (6: 16) *2),
  traj=rbind(
    matrix (seq (16,19, length=21), ncol=21, nrow=50, byrow=TRUE),
    matrix (seq (15.8, 18, length=21), ncol=21, nrow=30, byrow=TRUE)
  )+rnorm(21*80,0,0.2)
)

#+end_src

#+begin_src R :session :results output
par(mfrow=c (1,2))
plot(trajCochin)
plot(trajStAnne)
#+end_src

#+RESULTS:

** DONE Scripting powers

Nome do arquivo: =r-script=

#+begin_src bash
#!/usr/bin/r

require(grDevices)
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
print(args)
# trailingOnly=TRUE means that only your arguments are returned, check:
# print(commandArgs(trailingOnly=FALSE))

start_date <- as.Date(args[1])
name <- args[2]
n <- as.integer(args[3])
rm(args)

# Some computations:
x <- rnorm(n)
png(paste(name,".png",sep=""))
plot(start_date+(1L:n), x)
dev.off()

summary(x)
#+end_src

#+begin_src bash :noeval
Rscript $(command -v r-script) 2023-01-01 "Deltrano" 30
#+end_src

*** Resultado
#+ATTR_HTML: :width 500px
[[file:Deltrano.png]]

* STRT Jupyter, a tríade Julia, Python, R
* STRT Links
    R:
- https://www.r-project.org/about.html
- https://en.wikipedia.org/wiki/R_(programming_language)
- https://link.springer.com/chapter/10.1007/978-3-642-31057-7_6
- https://www.r-bloggers.com/2013/06/practicing-static-typing-in-r-prime-directive-on-trusting-our-functions-with-object-oriented-programming/
- https://www.r-bloggers.com/2020/06/r-objects-s-objects-and-lexical-scoping/
- https://cran.r-project.org/doc/contrib/Genolini-S4tutorialV0-5en.pdf

  Common Lisp:
- https://courses.cs.northwestern.edu/325/readings/clos.html
* STRT =Reveal.js= Options
# :REVEAL_PROPERTIES:
# #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
# #+REVEAL_REVEAL_JS_VERSION: 4
# # #+REVEAL_THEME: sky
# #+REVEAL_EXTRA_CSS: ./css/blood.css
# #+REVEAL_EXTRA_CSS: ./css/fonts.css
# #+REVEAL_EXTERNAL_PLUGINS: (spotlight "js/spotlight.js" "plugin/spotlight.js")
# #+REVEAL_EXTRA_SCRIPT_SRC: ./js/caption.js
# #+REVEAL_EXTRA_SCRIPT_SRC: ./js/style.js
# #+REVEAL_PLUGINS: (highlight)
# #+REVEAL_HIGHLIGHT_CSS: https://cdn.jsdelivr.net/npm/reveal.js@4.2.0/plugin/highlight/monokai.css
# #+OPTIONS: reveal_global_footer:t
# #+OPTIONS: timestamp:nil toc:2 num:nil
# :END:
# #+OPTIONS: toc:nil
